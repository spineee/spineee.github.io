<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Darkflame</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-02-18T08:27:11.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>spine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>寒假练习</title>
    <link href="http://yoursite.com/2016/02/18/practice1/"/>
    <id>http://yoursite.com/2016/02/18/practice1/</id>
    <published>2016-02-18T08:27:11.773Z</published>
    <updated>2016-02-18T08:27:11.773Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Week1&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-MISC_u4ECE0_u5F00_u59CB_u4E4BSteg&quot;&gt;&lt;a href=&quot;#1-MISC_u4ECE0_u5F00_u59CB_u4E4BSteg&quot; class=&quot;headerlink&quot; title=&quot;1.MISC从0开始之Steg&quot;&gt;&lt;/a&gt;&lt;strong&gt;1.MISC从0开始之Steg&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;一开始并不会做，然而有了隐写工具链接后下载之，自带Unhide，于是拿到flag&lt;/p&gt;
&lt;h3 id=&quot;2-WEB_u4ECE0_u5F00_u59CB_u4E4BPHP_u4EE3_u7801_u5BA1_u8BA10&quot;&gt;&lt;a href=&quot;#2-WEB_u4ECE0_u5F00_u59CB_u4E4BPHP_u4EE3_u7801_u5BA1_u8BA10&quot; class=&quot;headerlink&quot; title=&quot;2.WEB从0开始之PHP代码审计0&quot;&gt;&lt;/a&gt;&lt;strong&gt;2.WEB从0开始之PHP代码审计0&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;hctf一模一样的题，把md5改成了sha1，做法一样233&lt;/p&gt;
&lt;h3 id=&quot;3-_u5BC6_u7801_u5B66_u4ECE0_u5F00_u59CB_u4E4B1-1&quot;&gt;&lt;a href=&quot;#3-_u5BC6_u7801_u5B66_u4ECE0_u5F00_u59CB_u4E4B1-1&quot; class=&quot;headerlink&quot; title=&quot;3.密码学从0开始之1.1&quot;&gt;&lt;/a&gt;&lt;strong&gt;3.密码学从0开始之1.1&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;F12看到一串01串，尝试把它变成16进制串，发现开头为0x89504E47，嗯，png图嘛，话说这算密码学?&lt;/p&gt;
&lt;h3 id=&quot;4-_u5BC6_u7801_u5B66_u4ECE0_u5F00_u59CB_u4E4B1&quot;&gt;&lt;a href=&quot;#4-_u5BC6_u7801_u5B66_u4ECE0_u5F00_u59CB_u4E4B1&quot; class=&quot;headerlink&quot; title=&quot;4.密码学从0开始之1&quot;&gt;&lt;/a&gt;&lt;strong&gt;4.密码学从0开始之1&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;摩斯密码，找个在线翻译就可以&lt;/p&gt;
&lt;h3 id=&quot;5-MISC_u4ECE0_u5F00_u59CB_u4E4B_u6D41_u91CF_u5206_u67901&quot;&gt;&lt;a href=&quot;#5-MISC_u4ECE0_u5F00_u59CB_u4E4B_u6D41_u91CF_u5206_u67901&quot; class=&quot;headerlink&quot; title=&quot;5.MISC从0开始之流量分析1&quot;&gt;&lt;/a&gt;&lt;strong&gt;5.MISC从0开始之流量分析1&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;分析后发现最后有个flag的get请求，查看返回内容，得到一个gzip的文件，解压之~&lt;/p&gt;
&lt;h3 id=&quot;6-MISC_u4ECE0_u5F00_u59CB_u4E4B_u7F16_u78011&quot;&gt;&lt;a href=&quot;#6-MISC_u4ECE0_u5F00_u59CB_u4E4B_u7F16_u78011&quot; class=&quot;headerlink&quot; title=&quot;6.MISC从0开始之编码1&quot;&gt;&lt;/a&gt;&lt;strong&gt;6.MISC从0开始之编码1&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;base全家桶，真没什么好说的&lt;/p&gt;
&lt;h3 id=&quot;7-lightless_26amp_3Baklis_u7684_u6E17_u900F_u6559_u5BA4-2&quot;&gt;&lt;a href=&quot;#7-lightless_26amp_3Baklis_u7684_u6E17_u900F_u6559_u5BA4-2&quot; class=&quot;headerlink&quot; title=&quot;7.lightless&amp;amp;aklis的渗透教室-2&quot;&gt;&lt;/a&gt;&lt;strong&gt;7.lightless&amp;amp;aklis的渗透教室-2&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;用的是burp，一共3个要求：&lt;br&gt;你应当来自google.com&lt;br&gt;你的xff应当来自本地&lt;br&gt;你应当使用iOS 99访问本页面&lt;br&gt;第一个改referer，第二个改X-Forwarded-For为127.0.0.1，第3个给了ios9的User-Agent，把9改成99就行了,在返回头里可以看到flag&lt;/p&gt;
&lt;h3 id=&quot;8-MISC__u9A7E_u9A76_u6280_u672F_u79D1_u76EE_u4E00&quot;&gt;&lt;a href=&quot;#8-MISC__u9A7E_u9A76_u6280_u672F_u79D1_u76EE_u4E00&quot; class=&quot;headerlink&quot; title=&quot;8.MISC 驾驶技术科目一&quot;&gt;&lt;/a&gt;&lt;strong&gt;8.MISC 驾驶技术科目一&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;流量分析，过滤get请求，可以找到first/xxxx的那几个请求，貌似flag会随机出现在这里面的一个，拿到一串base64字符串，解码拿到flag&lt;/p&gt;
&lt;h3 id=&quot;9-MISC__u9A7E_u9A76_u6280_u672F_u79D1_u76EE_u4E8C&quot;&gt;&lt;a href=&quot;#9-MISC__u9A7E_u9A76_u6280_u672F_u79D1_u76EE_u4E8C&quot; class=&quot;headerlink&quot; title=&quot;9.MISC 驾驶技术科目二&quot;&gt;&lt;/a&gt;&lt;strong&gt;9.MISC 驾驶技术科目二&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;拿到的flag再做一次base64，得到科目2的图片，binwalk跑一下，发现有一个zip的结尾，把zip的头找出来，解压，由于时间过去久远，忘了解压后拿到什么东西了，反正应该flag很容易能找到，顺便科目3的上车地址在图片2的描述那&lt;/p&gt;
&lt;h3 id=&quot;10-_u90A3_u4E9B_u5E74_u6211_u4EEC_u8131_u8FC7_u7684_u8863_u88F3&quot;&gt;&lt;a href=&quot;#10-_u90A3_u4E9B_u5E74_u6211_u4EEC_u8131_u8FC7_u7684_u8863_u88F3&quot; class=&quot;headerlink&quot; title=&quot;10.那些年我们脱过的衣裳&quot;&gt;&lt;/a&gt;&lt;strong&gt;10.那些年我们脱过的衣裳&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;一个简单的upx壳，脱了之后打开没反应，于是看程序，发现它是先打开同目录下的flag.txt读取里面的字符做处理来判断是否通过，判断十分简单，先对输入的每个字符xor 0xDE后再和预设的字符串比较，解出来后即为flag。&lt;/p&gt;
&lt;h3 id=&quot;11-_u6742_u8D27_u5806_u91CC_u7FFB_u51FA_u6765_u9898&quot;&gt;&lt;a href=&quot;#11-_u6742_u8D27_u5806_u91CC_u7FFB_u51FA_u6765_u9898&quot; class=&quot;headerlink&quot; title=&quot;11.杂货堆里翻出来题&quot;&gt;&lt;/a&gt;&lt;strong&gt;11.杂货堆里翻出来题&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;貌似这题好像是做过，但时间更久远，还是重做了一遍，一开始是对内存的解码工作，od更改eip到入口点，直接跳到jump那，现在想要静态调试的话，dump即可，但由于加花和其他种种原因，单纯的静态分析起来有点困难，于是动态调，算法不算很复杂，慢慢调吧&lt;/p&gt;
&lt;h3 id=&quot;12-_u8FA3_u9E21sublime&quot;&gt;&lt;a href=&quot;#12-_u8FA3_u9E21sublime&quot; class=&quot;headerlink&quot; title=&quot;12.辣鸡sublime&quot;&gt;&lt;/a&gt;&lt;strong&gt;12.辣鸡sublime&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;找到那个字符串，od改掉那几处跳转就行了&lt;/p&gt;
&lt;h3 id=&quot;13-Where_is_flag&quot;&gt;&lt;a href=&quot;#13-Where_is_flag&quot; class=&quot;headerlink&quot; title=&quot;13.Where is flag&quot;&gt;&lt;/a&gt;&lt;strong&gt;13.Where is flag&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;嗯，这题自己出的，本来想写的更复杂些，自己先绕晕了就算了233。先是要找到输入框在哪，用resource hacker改一下输入框的位置，然后应该很容易就能看出来程序在做一个方程组，解出来第一个按钮按两下就能看到flag啦&lt;/p&gt;
&lt;h3 id=&quot;14-CTF_coding_step1&quot;&gt;&lt;a href=&quot;#14-CTF_coding_step1&quot; class=&quot;headerlink&quot; title=&quot;14.CTF coding step1&quot;&gt;&lt;/a&gt;&lt;strong&gt;14.CTF coding step1&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;不多说，上脚本，后面式子形式会变一次，到最后要判断下是不是结束了，还有repr这个坑&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; zio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target = (&lt;span class=&quot;string&quot;&gt;&#39;115.29.77.78&#39;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9979&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io = zio.zio(target)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io.read_until(&lt;span class=&quot;string&quot;&gt;&#39;=\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = io.readline()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list(b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        io.interact()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = a.replace(&lt;span class=&quot;string&quot;&gt;&#39;=&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = a.replace(&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = a.replace(&lt;span class=&quot;string&quot;&gt;&#39;[*]&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = a.replace(&lt;span class=&quot;string&quot;&gt;&#39;×&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = a.replace(&lt;span class=&quot;string&quot;&gt;&#39;÷&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = eval(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &amp;lt; &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a = &lt;span class=&quot;string&quot;&gt;&#39;%d&#39;&lt;/span&gt;%a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        io.write(a+&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        a = repr(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        io.write(a+&lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;io.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;15-pwn_step0&quot;&gt;&lt;a href=&quot;#15-pwn_step0&quot; class=&quot;headerlink&quot; title=&quot;15.pwn step0&quot;&gt;&lt;/a&gt;&lt;strong&gt;15.pwn step0&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;输入一段a即可&lt;/p&gt;
&lt;h3 id=&quot;16-pwn_step1&quot;&gt;&lt;a href=&quot;#16-pwn_step1&quot; class=&quot;headerlink&quot; title=&quot;16.pwn step1&quot;&gt;&lt;/a&gt;&lt;strong&gt;16.pwn step1&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;既然函数没有被调用过，手动跳过去呗，溢出，返回改成foo函数&lt;/p&gt;
&lt;h3 id=&quot;RE-HCTF_450&quot;&gt;&lt;a href=&quot;#RE-HCTF_450&quot; class=&quot;headerlink&quot; title=&quot;RE-HCTF 450&quot;&gt;&lt;/a&gt;&lt;strong&gt;RE-HCTF 450&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;vm，花了好久才做出来，说下思路吧，一开始看到那串push吓了一跳，push后有两个call，第一个猜测是给每个函数一个标号，最后用标号来调用这些函数，olldbg调发现第二个call里有call eax这么个东西，多次实验发现调用的就是前面标号的那些函数，而且栈上刚好有那个标号，于是下断点，结合push进去的字节码+多次试验最后可以大致猜出每个字节码的意义，然后最重要的，我在虚拟的cmp指令下断点，反复试验，找到判断点后，发现了数据基本就在同一个地方，这个意味着我们只要一直看着这地方，在那些操作数据的函数下断点，我们就可以清晰的明白数据处理流程。&lt;br&gt;于是把函数分为对数据操作的函数，和无用的函数（字节码操作跳转啊啥的），F9在call eax的地方看看栈上的标号决定跳还是不跳，也可以把这个断点去掉，在那些有用的函数内部下断点，这样可能更快&lt;br&gt;大概有这么几个有用的函数：&lt;br&gt;03：作偏移 05：xor 08：shl 09：and 07：shr 0E：strlen 06：cmp 01 40 xx：往存数据的地方放入xx 0A：or&lt;br&gt;接下来是处理了：&lt;br&gt;在前面找判断点的时候基本上摸清了flag格式&lt;br&gt;flag形式为HCTF{XXXXYYYYZZZZMMMMMMM HCTF{可以试出来就没去看&lt;br&gt;检验顺序为HCTF{ ZYXM&lt;br&gt;做偏移用的字符串：0123456789qazwsxedcrtgbyhnujmiolp&lt;br&gt;对Z的处理如下：&lt;br&gt;对4字节长度的Z，取Z最高5位做偏移，然后shl(z,5)循环，得到的字符串和75qrzz8比较&lt;br&gt;对4字节长度的Y，先对Y做反向，这个反向是ascii码+字节顺序的反向(算法十分蛋疼，我都没看懂过程)，然后rol(Y,3)，再次反向，做和Z同样的操作后和mqzht4e比较&lt;br&gt;对4字节长度的Z，先同样做反向，然后rol(Z,3)，和Z类似，但这次是右移5位取低5位，而且每次得到的结果还要加30，得到的字符串和158F9D2比较&lt;br&gt;对7字节长度的M，每一个M都xor 22，这一部分想想太简单，应该是防作弊的时候加的吧。&lt;br&gt;应该说程序本身的各种合适条件，这题才没有变得非要写个程序，或用到什么高端科技才能做出来，要是搞个多个变量存放地点，再比如call不是只有call eax一处……当然以上只是脑洞，也许会有更简单的方法？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Week1&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-MISC_u4ECE0_u5F00_u59CB_u4E4BSteg&quot;&gt;&lt;a href=&quot;#1-MISC_u4ECE0_u5F00_u59CB_u4E4BSteg&quot;
    
    </summary>
    
    
      <category term="ctf" scheme="http://yoursite.com/tags/ctf/"/>
    
  </entry>
  
</feed>
